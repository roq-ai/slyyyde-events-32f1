generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?   @db.Uuid
  event_id       String?   @db.Uuid
  check_in_time  DateTime? @db.Timestamp(6)
  check_out_time DateTime? @db.Timestamp(6)
  status         String    @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  event          event?    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model event {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(100)
  description  String         @db.VarChar(255)
  location     String         @db.VarChar(100)
  date_time    DateTime       @db.Timestamp(6)
  organizer_id String?        @db.Uuid
  platform_id  String?        @db.Uuid
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  attendance   attendance[]
  user         user?          @relation(fields: [organizer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  platform     platform?      @relation(fields: [platform_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subscription subscription[]
}

model platform {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  event       event[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  user_id     String?  @db.Uuid
  permissions String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model subscription {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?   @db.Uuid
  event_id          String?   @db.Uuid
  subscription_date DateTime  @db.Timestamp(6)
  status            Boolean
  expiry_date       DateTime? @db.Timestamp(6)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  event             event?    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              user?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  attendance   attendance[]
  event        event[]
  platform     platform[]
  role         role[]
  subscription subscription[]
}
